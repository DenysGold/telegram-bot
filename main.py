import asyncio
import logging
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from flask import Flask
from threading import Thread

import db  # —Ç–≤–æ—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ add_user, get_all_users, export_users_to_excel

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "0"))

# ‚öôÔ∏è Flask –¥–ª—è keep-alive
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (Flask)!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.daemon = True
    t.start()

# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å –±–æ—Ç–æ–º!
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
router = Router()
dp.include_router(router)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è UID
broadcast_mode = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üî• –ü–û–ü–ê–°–¢–¨ –í –ß–ê–¢ –° –°–ò–ì–ù–ê–õ–ê–ú–ò", callback_data="join_chat_info")],
    [InlineKeyboardButton(text="üìù –û–¢–ó–´–í–´", callback_data="reviews")],
    [InlineKeyboardButton(text="üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê", callback_data="stats")],
    [InlineKeyboardButton(text="üòà –û–ë–û –ú–ù–ï", callback_data="about")]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞
admin_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="üì§ –†–∞—Å—Å—ã–ª–∫–∞"), KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
    [KeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç .xlsx"), KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç")]
])

@router.message(Command("start"))
async def start_handler(message: types.Message):
    user = message.from_user
    join_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    try:
        db.add_user(user.id, user.username or "", user.first_name or "", join_date)
    except Exception as e:
        logging.error(f"DB add_user error: {e}")

    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç –¥—Ä—É–≥, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É –∫–æ–º—å—é–Ω–∏—Ç–∏.\n\n"
        "–ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—É—Ç:\n"
        "üîπ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ —Å–¥–µ–ª–∫–∏\n"
        "üîπ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏\n"
        "üîπ –æ–±—É—á–∞—é—â–∏–µ —É—Ä–æ–∫–∏\n\n"
        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –Ω–µ–≥–æ, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –±–∏—Ä–∂–µ BingX –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n\n"
        "<b>–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>\n\n"
        "üìò <a href='https://telegra.ph/Kak-zaregistrirovatsya-na-kripto-birzhe-BingX-06-13'>–ö–ê–ö –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–Ø –ù–ê –ë–ò–†–ñ–ï BingX</a>\n"
        "üìò <a href='https://telegra.ph/Instrukciya-po-perenosu-KYC-06-13'>–ü–û–®–ê–ì–û–í–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–ï–†–ï–ù–û–°–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò</a>\n"
        "üìò <a href='https://telegra.ph/Kak-kupit-kriptovalyutu-na-birzhe-BingX-06-13'>–ö–ê–ö –ö–£–ü–ò–¢–¨ –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–£ –ß–ï–†–ï–ó P2P</a>\n"
        "üìò <a href='https://telegra.ph/Rabota-so-sdelkami-na-BingX-06-13'>–†–ê–ë–û–¢–ê –°–û –°–î–ï–õ–ö–ê–ú–ò –ù–ê BingX</a>\n"
        "üìò <a href='https://telegra.ph/Otkrytie-sdelki-LONG-i-SHORT-06-14'>–û–¢–ö–†–´–¢–ò–ï LONG/SHORT –°–î–ï–õ–û–ö</a>\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ BingX ‚Äî —Ç—ã –º–æ–∂–µ—à—å <b>–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –µ–≥–æ –ø–æ–¥ –º–æ—é —Å—Å—ã–ª–∫—É</b>. –≠—Ç–æ –Ω–µ—Å–ª–æ–∂–Ω–æ –∏ –∑–∞–π–º–µ—Ç 15 –º–∏–Ω—É—Ç.\n\n"
        "–í–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏: @Gold_Denys"
    )
    await message.answer(text, parse_mode="HTML", reply_markup=main_kb, disable_web_page_preview=True)

@router.callback_query(lambda c: c.data == "join_chat_info")
async def join_chat_info(callback_query: types.CallbackQuery):
    text = (
        "<b>–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —á–∞—Ç —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏</b>\n"
        "–ï—Å—Ç—å –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ ‚Äî\n\n"
        "‚ö†Ô∏è <b>–ë–´–¢–¨ –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–ú –ü–û –ú–û–ï–ô –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–°–´–õ–ö–ï</b>\n\n"
        "üëâ <a href='https://bingx.com/invite/XQ1AMO'>https://bingx.com/invite/XQ1AMO</a>\n\n"
        "<b>–ö–æ–¥: <code>XQ1AMO</code></b>\n\n"
        "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç–ø—Ä–∞–≤—å <b>—Ç–≤–æ–π UID</b> –Ω–∞—à–µ–º—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: @Gold_Denys\n\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—ã —Å—Ä–∞–∑—É –±—É–¥–µ—à—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ üî•"
    )
    await callback_query.message.answer(text, parse_mode="HTML", disable_web_page_preview=True)

@router.callback_query(lambda c: c.data == "about")
async def about_handler(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üòà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –ø–æ–∑–∂–µ.")

@router.callback_query(lambda c: c.data == "reviews")
async def reviews_handler(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üìù –û—Ç–∑—ã–≤—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ.")

@router.callback_query(lambda c: c.data == "stats")
async def stats_handler(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.")

@router.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_kb)

@router.message(lambda m: m.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_stats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    users = db.get_all_users()
    await message.answer(f"üìä –í –±–∞–∑–µ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@router.message(lambda m: m.text == "üì• –≠–∫—Å–ø–æ—Ä—Ç .xlsx")
async def admin_export_excel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    filename = db.export_users_to_excel()
    await message.answer_document(types.FSInputFile(filename))

@router.message(lambda m: m.text == "üì§ –†–∞—Å—Å—ã–ª–∫–∞")
async def admin_broadcast_start(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    broadcast_mode[message.from_user.id] = True
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")

@router.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç")
async def manual_add_to_chat(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    broadcast_mode["add_uid"] = True
    await message.answer("üî¢ –í–≤–µ–¥–∏ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ):")

@router.message()
async def general_handler(message: types.Message):
    user_id = message.from_user.id

    if broadcast_mode.get(user_id):
        users = db.get_all_users()
        count = 0
        for uid in users:
            try:
                await bot.send_message(uid, f"üì¢ –í–∞–∂–Ω–æ!:\n\n{message.text}")
                await asyncio.sleep(0.05)  # –ê–Ω—Ç–∏—Ñ–ª—É–¥
                count += 1
            except Exception as e:
                logging.error(f"Failed to send to {uid}: {e}")
        broadcast_mode[user_id] = False
        await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        return

    if broadcast_mode.get("add_uid") and user_id == ADMIN_ID:
        try:
            uid = int(message.text)
            invite_link = await bot.export_chat_invite_link(GROUP_CHAT_ID)
            await bot.send_message(uid, f"‚úÖ –í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ —á–∞—Ç –ø–æ —Å—Å—ã–ª–∫–µ:\n{invite_link}")
            await message.answer("‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        broadcast_mode["add_uid"] = False
        return

async def main():
    keep_alive()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
