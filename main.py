import asyncio
import logging
from datetime import datetime
from threading import Thread
from flask import Flask
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import db  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–π —Ñ–∞–π–ª db.py

API_TOKEN = "7920083802:AAEi4cYNYg_oEPPXDldV8corWs7HgHwQtKI"
ADMIN_ID = 911957250
GROUP_CHAT_ID = -1000000000000  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID

# üîπ Flask –¥–ª—è keep-alive
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (Flask)!"

def keep_alive():
    Thread(target=lambda: app.run(host='0.0.0.0', port=8080)).start()

# üîπ –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

broadcast_mode = {}

# üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üî• –ü–û–ü–ê–°–¢–¨ –í –ß–ê–¢ –° –°–ò–ì–ù–ê–õ–ê–ú–ò", callback_data="join_chat_info")],
    [InlineKeyboardButton(text="üìù –û–¢–ó–´–í–´", callback_data="reviews")],
    [InlineKeyboardButton(text="üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê", callback_data="stats")],
    [InlineKeyboardButton(text="üòà –û–ë–û –ú–ù–ï", callback_data="about")]
])

# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_kb = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [KeyboardButton(text="üì§ –†–∞—Å—Å—ã–ª–∫–∞"), KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç .xlsx"), KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç")]
    ]
)

# üîπ –°—Ç–∞—Ä—Ç
@router.message(Command("start"))
async def start_handler(message: types.Message):
    user = message.from_user
    join_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    try:
        db.add_user(user.id, user.username or "", user.first_name or "", join_date)
    except:
        pass

    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç –¥—Ä—É–≥, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É –∫–æ–º—å—é–Ω–∏—Ç–∏.\n\n"
        "üîπ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ —Å–¥–µ–ª–∫–∏\nüîπ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏\nüîπ –æ–±—É—á–∞—é—â–∏–µ —É—Ä–æ–∫–∏\n\n"
        "–î–ª—è –≤—Ö–æ–¥–∞ ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ –±–∏—Ä–∂–µ BingX –ø–æ —Å—Å—ã–ª–∫–µ:\n\n"
        "üëâ <a href='https://bingx.com/invite/XQ1AMO'>https://bingx.com/invite/XQ1AMO</a>\n"
        "<b>–ö–æ–¥: <code>XQ1AMO</code></b>\n\n"
        "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏ @Gold_Denys –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π UID ‚Äî –¥–æ–±–∞–≤–∏–º –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç."
    )
    await message.answer(text, parse_mode="HTML", reply_markup=main_kb, disable_web_page_preview=True)

# üîπ –ö–æ–ª–ª–±—ç–∫–∏
@router.callback_query(lambda c: c.data == "join_chat_info")
async def join_chat_info(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "<b>–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —á–∞—Ç —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏</b>\n\n"
        "‚ö†Ô∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ —Å—Å—ã–ª–∫–µ:\n"
        "üëâ <a href='https://bingx.com/invite/XQ1AMO'>https://bingx.com/invite/XQ1AMO</a>\n"
        "<b>UID –ø—Ä–∏—à–ª–∏ @Gold_Denys</b>", parse_mode="HTML", disable_web_page_preview=True
    )

@router.callback_query(lambda c: c.data == "about")
async def about(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üòà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –ø–æ–∑–∂–µ.")

@router.callback_query(lambda c: c.data == "reviews")
async def reviews(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üìù –û—Ç–∑—ã–≤—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ.")

@router.callback_query(lambda c: c.data == "stats")
async def stats(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.")

# üîπ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞
@router.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_kb)

# üîπ –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
@router.message(lambda m: m.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_stats(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        users = db.get_all_users()
        await message.answer(f"üìä –í –±–∞–∑–µ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@router.message(lambda m: m.text == "üì• –≠–∫—Å–ø–æ—Ä—Ç .xlsx")
async def admin_export_excel(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        filename = db.export_users_to_excel()
        await message.answer_document(types.FSInputFile(filename))

@router.message(lambda m: m.text == "üì§ –†–∞—Å—Å—ã–ª–∫–∞")
async def admin_broadcast_start(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        broadcast_mode[message.from_user.id] = True
        await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")

@router.message()
async def admin_text(message: types.Message):
    if broadcast_mode.get(message.from_user.id):
        users = db.get_all_users()
        count = 0
        for uid in users:
            try:
                await bot.send_message(uid, f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message.text}")
                count += 1
            except:
                pass
        broadcast_mode[message.from_user.id] = False
        await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# üîπ –ó–∞–ø—É—Å–∫
async def main():
    keep_alive()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
