import os
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, FSInputFile
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
import db

API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "0"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8080))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, default=bot.DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

main_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üî• –ü–û–ü–ê–°–¢–¨ –í –ß–ê–¢ –° –°–ò–ì–ù–ê–õ–ê–ú–ò", callback_data="join_chat_info")],
    [InlineKeyboardButton(text="üìù –û–¢–ó–´–í–´", callback_data="reviews")],
    [InlineKeyboardButton(text="üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê", callback_data="stats")],
    [InlineKeyboardButton(text="üòà –û–ë–û –ú–ù–ï", callback_data="about")]
])

admin_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="üì§ –†–∞—Å—Å—ã–ª–∫–∞"), KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
    [KeyboardButton(text="üìÖ –≠–∫—Å–ø–æ—Ä—Ç .xlsx"), KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç")]
])

broadcast_mode = {}
add_mode = {}

WELCOME_TEXT = (
    "üëã –ü—Ä–∏–≤–µ—Ç –¥—Ä—É–≥, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É –∫–æ–º—å—é–Ω–∏—Ç–∏.\n\n"
    "üîπ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ —Å–¥–µ–ª–∫–∏\n"
    "üîπ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏\n"
    "üîπ –æ–±—É—á–∞—é—â–∏–µ —É—Ä–æ–∫–∏\n\n"
    "üìò <a href='https://telegra.ph/Kak-zaregistrirovatsya-na-kripto-birzhe-BingX-06-13'>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ BingX</a>\n"
    "üìò <a href='https://telegra.ph/Instrukciya-po-perenosu-KYC-06-13'>–ü–µ—Ä–µ–Ω–æ—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</a>\n"
    "üìò <a href='https://telegra.ph/Kak-kupit-kriptovalyutu-na-birzhe-BingX-06-13'>–ö–∞–∫ –∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç—É</a>\n"
    "üìò <a href='https://telegra.ph/Rabota-so-sdelkami-na-BingX-06-13'>–†–∞–±–æ—Ç–∞ —Å–æ —Å–¥–µ–ª–∫–∞–º–∏</a>\n"
    "üìò <a href='https://telegra.ph/Otkrytie-sdelki-LONG-i-SHORT-06-14'>–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫</a>\n\n"
    "–ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –µ—Å—Ç—å ‚Äî –ø–µ—Ä–µ–Ω–µ—Å–∏ –ø–æ–¥ –º–æ—é —Å—Å—ã–ª–∫—É\n"
    "–í–æ–ø—Ä–æ—Å—ã ‚Äî @Gold_Denys"
)

@dp.message(Command("start"))
async def start_handler(message: Message):
    user = message.from_user
    try:
        db.add_user(user.id, user.username or "", user.first_name or "", datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    await message.answer(WELCOME_TEXT, reply_markup=main_kb, disable_web_page_preview=True)

@dp.callback_query(F.data == "join_chat_info")
async def join_chat_info(callback: CallbackQuery):
    await callback.message.answer(
        "<b>–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —á–∞—Ç —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏</b>\n\n"
        "‚ö†Ô∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ —Å—Å—ã–ª–∫–µ:\n"
        "üëâ <a href='https://bingx.com/invite/XQ1AMO'>https://bingx.com/invite/XQ1AMO</a>\n"
        "–ö–æ–¥: <code>XQ1AMO</code>\n\n"
        "–ü–æ—Å–ª–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å UID –≤ @Gold_Denys", disable_web_page_preview=True)

@dp.callback_query(F.data == "about")
async def about_handler(callback: CallbackQuery):
    await callback.message.answer("üòà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "reviews")
async def reviews_handler(callback: CallbackQuery):
    await callback.message.answer("üìù –û—Ç–∑—ã–≤—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "stats")
async def stats_handler(callback: CallbackQuery):
    await callback.message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.")

@dp.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_kb)

@dp.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_stats(message: Message):
    if message.from_user.id == ADMIN_ID:
        users = db.get_all_users()
        await message.answer(f"üìä –í –±–∞–∑–µ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@dp.message(F.text == "üìÖ –≠–∫—Å–ø–æ—Ä—Ç .xlsx")
async def export_excel(message: Message):
    if message.from_user.id == ADMIN_ID:
        filename = db.export_users_to_excel()
        await message.answer_document(FSInputFile(filename))

@dp.message(F.text == "üì§ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: Message):
    if message.from_user.id == ADMIN_ID:
        broadcast_mode[message.from_user.id] = True
        await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç")
async def start_add_user(message: Message):
    if message.from_user.id == ADMIN_ID:
        add_mode[message.from_user.id] = True
        await message.answer("üî¢ –í–≤–µ–¥–∏ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ):")

@dp.message()
async def fallback_handler(message: Message):
    uid = message.from_user.id
    if broadcast_mode.get(uid):
        users = db.get_all_users()
        count = 0
        for user_id in users:
            try:
                await bot.send_message(user_id, f"üì¢ –í–∞–∂–Ω–æ:\n\n{message.text}")
                count += 1
            except Exception:
                continue
        broadcast_mode[uid] = False
        await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    elif add_mode.get(uid):
        try:
            new_id = int(message.text)
            await bot.send_message(new_id, "‚úÖ –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç.")
            await bot.add_chat_member(chat_id=GROUP_CHAT_ID, user_id=new_id)
            await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        add_mode[uid] = False

# --- –í–µ–±—Ö—É–∫ ---
async def on_startup(bot: Bot):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(bot: Bot):
    await bot.delete_webhook()

async def handle_root(request):
    return web.Response(text="Bot is alive!")

async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
    setup_application(app, dp, bot=bot)
    app.router.add_get("/", handle_root)

    web.run_app(app, host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
