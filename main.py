import asyncio
import logging
import os
from datetime import datetime
from threading import Thread

from aiogram import Bot, Dispatcher, F
from aiogram.enums.parse_mode import ParseMode
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, FSInputFile
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command

from flask import Flask
import db  # —Ç–≤–æ—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–∞–∫ –∏ –±—ã–ª–æ


# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "0"))

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# --- Flask keep-alive –¥–ª—è Render/Replit ---
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (Flask)!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    Thread(target=run_flask).start()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

main_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üî• –ü–û–ü–ê–°–¢–¨ –í –ß–ê–¢ –° –°–ò–ì–ù–ê–õ–ê–ú–ò", callback_data="join_chat_info")],
    [InlineKeyboardButton(text="üìù –û–¢–ó–´–í–´", callback_data="reviews")],
    [InlineKeyboardButton(text="üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê", callback_data="stats")],
    [InlineKeyboardButton(text="üòà –û–ë–û –ú–ù–ï", callback_data="about")]
])

admin_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="üì§ –†–∞—Å—Å—ã–ª–∫–∞"), KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
    [KeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç .xlsx"), KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç")]
])

broadcast_mode = {}
add_mode = {}


# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---

WELCOME_TEXT = (
    "üëã –ü—Ä–∏–≤–µ—Ç –¥—Ä—É–≥, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É –∫–æ–º—å—é–Ω–∏—Ç–∏.\n\n"
    "–ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—É—Ç:\n"
    "üîπ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ —Å–¥–µ–ª–∫–∏\n"
    "üîπ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏\n"
    "üîπ –æ–±—É—á–∞—é—â–∏–µ —É—Ä–æ–∫–∏\n\n"
    "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –Ω–µ–≥–æ, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –±–∏—Ä–∂–µ BingX –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n\n"
    "–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n\n"
    "üìò <a href='https://telegra.ph/Kak-zaregistrirovatsya-na-kripto-birzhe-BingX-06-13'>–ö–ê–ö –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–Ø –ù–ê –ë–ò–†–ñ–ï BingX</a>\n\n"
    "üìò <a href='https://telegra.ph/Instrukciya-po-perenosu-KYC-06-13'>–ü–û–®–ê–ì–û–í–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–ï–†–ï–ù–û–°–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò</a>\n\n"
    "üìò <a href='https://telegra.ph/Kak-kupit-kriptovalyutu-na-birzhe-BingX-06-13'>–ö–ê–ö –ö–£–ü–ò–¢–¨ –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–£ –ß–ï–†–ï–ó P2P</a>\n\n"
    "üìò <a href='https://telegra.ph/Rabota-so-sdelkami-na-BingX-06-13'>–†–ê–ë–û–¢–ê –°–û –°–î–ï–õ–ö–ê–ú–ò –ù–ê BingX</a>\n\n"
    "üìò <a href='https://telegra.ph/Otkrytie-sdelki-LONG-i-SHORT-06-14'>–û–¢–ö–†–´–¢–ò–ï LONG/SHORT –°–î–ï–õ–û–ö</a>\n\n"
    "–ï—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ BingX ‚Äî —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –µ–≥–æ –ø–æ–¥ –º–æ—é —Å—Å—ã–ª–∫—É. –≠—Ç–æ –Ω–µ—Å–ª–æ–∂–Ω–æ –∏ –∑–∞–π–º–µ—Ç 15 –º–∏–Ω—É—Ç.\n\n"
    "–í–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏: @Gold_Denys"
)


# --- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –±–µ–∑ –ø—Ä–µ–≤—å—é ---
async def send_long_message(chat_id: int, text: str, reply_markup=None, disable_web_page_preview=True):
    MAX_LENGTH = 4000
    start = 0
    while start < len(text):
        end = min(start + MAX_LENGTH, len(text))
        # –ù–µ —Ä–µ–∑–∞—Ç—å –ø–æ—Å—Ä–µ–¥–∏ —Å—Ç—Ä–æ–∫–∏, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        if end < len(text):
            last_newline = text.rfind('\n', start, end)
            if last_newline > start:
                end = last_newline + 1
        part = text[start:end].strip()
        if part:
            # –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, –∏–Ω–∞—á–µ None
            await bot.send_message(
                chat_id,
                part,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=disable_web_page_preview,
                reply_markup=reply_markup if start == 0 else None
            )
        start = end


# --- –•–µ–Ω–¥–ª–µ—Ä /start ---

@dp.message(Command("start"))
async def start_handler(message: Message):
    user = message.from_user
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        db.add_user(
            user.id,
            user.username or "",
            user.first_name or "",
            datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        )
    except Exception as e:
        logging.error(f"Error adding user: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –±–µ–∑ –ø—Ä–µ–≤—å—é
    await send_long_message(
        message.chat.id,
        WELCOME_TEXT,
        reply_markup=main_kb,
        disable_web_page_preview=True
    )


# --- –•–µ–Ω–¥–ª–µ—Ä—ã callback-–∫–Ω–æ–ø–æ–∫ ---

@dp.callback_query(F.data == "join_chat_info")
async def join_chat_info(callback: CallbackQuery):
    text = (
        "<b>–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —á–∞—Ç —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏</b>\n\n"
        "‚ö†Ô∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ –º–æ–µ–π —Ä–µ—Ñ-—Å—Å—ã–ª–∫–µ:\n"
        "üëâ <a href='https://bingx.com/invite/XQ1AMO'>https://bingx.com/invite/XQ1AMO</a>\n"
        "–ö–æ–¥: <code>XQ1AMO</code>\n\n"
        "–ü–æ—Å–ª–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å UID –≤ @Gold_Denys"
    )
    await send_long_message(callback.message.chat.id, text, disable_web_page_preview=True)

@dp.callback_query(F.data == "about")
async def about_handler(callback: CallbackQuery):
    await callback.message.answer("üòà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "reviews")
async def reviews_handler(callback: CallbackQuery):
    await callback.message.answer("üìù –û—Ç–∑—ã–≤—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "stats")
async def stats_handler(callback: CallbackQuery):
    await callback.message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.")


# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏ –∫–æ–º–∞–Ω–¥—ã ---

@dp.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_kb)


@dp.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_stats(message: Message):
    if message.from_user.id == ADMIN_ID:
        users = db.get_all_users()
        await message.answer(f"üìä –í –±–∞–∑–µ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


@dp.message(F.text == "üì• –≠–∫—Å–ø–æ—Ä—Ç .xlsx")
async def export_excel(message: Message):
    if message.from_user.id == ADMIN_ID:
        filename = db.export_users_to_excel()
        await message.answer_document(FSInputFile(filename))


@dp.message(F.text == "üì§ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: Message):
    if message.from_user.id == ADMIN_ID:
        broadcast_mode[message.from_user.id] = True
        await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")


@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç")
async def start_add_user(message: Message):
    if message.from_user.id == ADMIN_ID:
        add_mode[message.from_user.id] = True
        await message.answer("üî¢ –í–≤–µ–¥–∏ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ):")


@dp.message()
async def fallback_handler(message: Message):
    uid = message.from_user.id
    if broadcast_mode.get(uid):
        users = db.get_all_users()
        count = 0
        for user_id in users:
            try:
                await bot.send_message(user_id, f"üì¢ –í–∞–∂–Ω–æ:\n\n{message.text}")
                count += 1
            except Exception:
                continue
        broadcast_mode[uid] = False
        await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    elif add_mode.get(uid):
        try:
            new_id = int(message.text)
            await bot.send_message(new_id, "‚úÖ –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç.")
            await bot.add_chat_member(chat_id=GROUP_CHAT_ID, user_id=new_id)
            await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        add_mode[uid] = False


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ Flask ---
async def main():
    keep_alive()  # flask –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
